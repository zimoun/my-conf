
#+STARTUP: showall
* Debian

  #+begin_src shell

    apt install aptitude emacs-nox
    emacs /etc/apt/sources.list # <name> -> stable + contrib non-free
    aptitude update
    aptitude install intel-microcode firmware-iwlwifi
    aptitude install awesome xfce4-power-manager xscreensaver xterm
    aptitude install vlc transmission-gtk pavucontrol blueman
    aptitude install network-manager-openvpn
    dpkg-reconfigure tzdata

  #+end_src

  Be careful, the battery icon could be turned off, see =xfce4-power-manager-settings=.

* Guix

** As root

   1. Binary install
      #+begin_src shell
        wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
        bash guix-install.sh
      #+end_src
      Do not forget to add the =gpg= key as hinted by the helper script.

   2. Update (could be long)
      #+begin_src shell
        guix pull
      #+end_src

   3. Install the locales used for the daemon
      #+begin_src shell
        guix install glibc-locales
      #+end_src

   4. Do not forget to restart the daemon:
      #+begin_src shell
        systemctl restart guix-daemon.service
      #+end_src
      and see the configuration file =/etc/systemd/system/guix-daemon.service=.

** As regular user

   1. Update
      #+begin_src shell
        guix pull
        hash guix
      #+end_src
      Now =~/.config/guix/current= should be created.

   2. Clone the configuration files
      #+begin_src shell
        guix shell git nss-certs -- \
             git clone https://github.com/zimoun/my-conf.git
      #+end_src
      Usually in =~/src/=.

   3. Populate the profiles
      1) Create the folder and track the origin
	 #+begin_src shell
           GUIX=~/.config/guix/current/bin/guix
           GUIX_MYPROFILES=~/.config/guix/profiles

           mkdir -p $GUIX_MYPROFILES

           $GUIX describe -f channels \
                 > $GUIX_MYPROFILES/from-channels.scm
	 #+end_src

      2) Install for example the Emacs related packages
	 #+begin_src shell
           mkdir -p ${GUIX_MYPROFILES}/emacs/emacs
           $GUIX package					\
                 -m .config/guix/manifests/emacs.scm	\
                 -p ${GUIX_MYPROFILES}/emacs/emacs		\
                 --fallback
	 #+end_src

      The file =my-dumb-manifest-installer.sh= should automatize this for all the manifests.
      Note that the option =--fallback= is required because some substitutes
      should be missing.

      Maybe create =~/.config/emacs=.

* Configuration

  1. Propagate all the configurations files
     #+begin_src shell
       guix shell stow \
            -- stow -d $(pwd) -t $HOME . -R
     #+end_src

     Sometimes the folder does not exist yet and should be used by other applications,
     so to avoid issues and mix files in =my-conf/= let create them before stowing them, e.g.,
     =mkdir -p ~/.emacs.d/=

  2. Optionally cleanup the store
     #+begin_src shell
       guix gc
     #+end_src

  3. Create email encrypted password
     #+begin_src shell
       gpg -o ~/mail/pass-kikoo.gpg -c -
     #+end_src

  4. Enable sync of Emails
     #+begin_src shell
       export XDG_RUNTIME_DIR=/run/user/$(id -u)
       systemctl --user start mbsync.service mbsync.timer
       systemctl --user enable mbsync.timer
       systemctl --user start smtp.service smtp.timer
       systemctl --user enable smtp.timer
     #+end_src


  Now logout and relog (or maybe reboot).

** Tips
*** Empty shell
    #+begin_src shell
      env -i $(which bash) --login --noprofile --norc

      GUIX_PROFILE=path/to/project
      . $GUIX_PROFILE/etc/profile
    #+end_src
*** Enable guix shell --container
    Be careful !
    #+begin_src shell
      # as root
      echo "kernel.unprivileged_userns_clone = 1" > /etc/sysctl.d/local.conf
      sysctl --system
    #+end_src
    Trick for Debian.
*** Protect from GC 2.5GiB of input texlive-*-texmf.tar.xz
    #+begin_src shell
      guix build texlive -K
      guix gc --list-dead | grep texmf
      # As root
      ln -s /gnu/store/<hash>-texlive-<date>-texmf.tar.xz \
         /var/guix/gcroots/texlive-<date>-texmf.tar.xz
      # As user
      guix gc
    #+end_src
*** =guix system *-image= and KVM
    1. Check if =/dev/kvm= is there: =ls -l /dev/kvm=
    2. Add the user to the KVM group
       #+begin_src shell
         sudo usermod -a -G kvm <user>
         newgrp kvm
       #+end_src
    3. If it does not work, then try:
       #+begin_src shell
         sudo chmod 777 /dev/kvm
       #+end_src
    4. Verify with e.g.
       #+begin_src shell
         guix system image -t docker gnu/system/examples/docker-image.scm
       #+end_src
**** Docker
    #+begin_src shell
       sudo chmod 666 /var/run/docker.sock
    #+end_src
*** Email: =mbsync+notmuch= = hard time with Gmail
    One of the issue is that Gmail holds forever *all* the emails in /All Mails/ and it is then hard to definitively remove them.  They claim it works with some IMAP settings but I have failed.  The solution I came up is:

    1. Add the tag =+deleted= to messages.
    2. Remove them:
       #+begin_src shell
         notmuch tag -unread tag:deleted
         notmuch search --output=files --format=text0 tag:deleted \
                 | xargs -0 --no-run-if-empty rm
       #+end_src
    3. Sync: =mbsync -Va=
    4. Remove them time to time by hand using the WebApp interface, using the query:
       #+begin_src text
         -in:inbox -from:me -label:protected -label:starred
       #+end_src
       Be careful, it seems not working as expected, since Gmail outputs all the thread.  Aside, the /label/ =protected= is to skip the archived emails.

    Last, do not forget to allow IMAP for some folders, e.g., =[Gmail]/Bin=.

    Example of query -- size the detached GPG signatures:
    #+begin_src shell
      guix shell pv
      notmuch search --output=messages tag:signed \
          | xargs -I{} notmuch show --part=3 {}   \
          | pv -b 1> /dev/nul
      # Assumption!
      # Part: 1 all message, 2 body, 3 first attachment
    #+end_src
*** GitHub token
    #+begin_src shell
      git remote add origin https://<token>@github.com/<username/<repo>
    #+end_src
    where =<token>= has to be generated from their WebUI: User settings ->
    Developer Settings -> Personal access tokens; uniquely defined, thus
    redefined for each repo =.git/config=.
*** Date/hour

    #+begin_src shell
       date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
    #+end_src
